global SLOT_HAND    = 1
global SLOT_OFFHAND = 2
global SLOT_OUTFIT  = 3
global SLOT_BELT_L  = 4
global SLOT_BELT_R  = 5
global SLOT_BACK    = 6
global SLOT_POCKET1 = 7
global SLOT_POCKET2 = 8
global SLOT_POCKET3 = 9
global SLOT_POCKET4 = 10

GM[k] = v for k, v in pairs {
  InventoryCanRemove: (ply, inv, item) => hook.Run('CanInteract', ply, inv) and inv\CanRemoveItem item
  InventoryCanAccept: (ply, inv, item, slot) => hook.Run('CanInteract', ply, inv) and inv\CanAcceptItem item, slot
  InventoryItemChanged: (inv, slot, old, new) =>
    owner = inv\GetOwner!
    hands = owner\GetHands! if owner\IsPlayer! and slot == SLOT_HAND
}

global class INVENTORY extends ENTITY
  @__entity: 'inventory'
  Base: 'base_point'
  Type: 'point'

  Assign: (ent, index) =>
    @SetParent ent
    @SetOwner ent
    ent\SetNWEntity 'ThingInventory', @

  new: (where) =>
    assert isentity(where), 'arg 1 must be an entity'
    @Spawn!
    @Activate!
    @Assign where

  SetupDataTables: => @NetworkVar 'Entity', i, "Slot#{i+1}" for i=0,31

  HasSlot: (slot) => slot > 0 and slot <= 32
  GetSlot: (slot) => @["GetSlot#{slot}"] @
  SetSlot: (slot, item) => @["SetSlot#{slot}"] @, item

  HasItem: (slot) => IsValid @GetItem slot
  GetItem: (slot) => @GetSlot slot
  SetItem: (item, slot) =>
    old = @GetItem slot
    @SetSlot slot, item
    hook.Run 'InventoryItemChanged', @, slot, old, item
  GetItemSlot: (item) => item\GetInventorySlot!
  AddItem: (item, slot) =>
    @SetItem item, slot
    with item
      \SetInventoryEntity @
      \SetInventorySlot slot
      \SetParent @
      \SetLocalPos Vector!
      \SetLocalAngles Angle!
      \DrawShadow false
      \SetCollisionGroup COLLISION_GROUP_IN_VEHICLE
      if SERVER
        \GetPhysicsObject!\EnableMotion false
        \SetTrigger false
  RemoveItem: (item) =>
    return if item\GetInventoryEntity! ~= @
    @SetItem NULL, item\GetInventorySlot!

  CanInteract: (ply) => true
  CanAcceptItem: (item, slot) => not @HasItem slot
  CanRemoveItem: (item) => true

  UpdateTransmitState: => TRANSMIT_PVS
  OnRemove: =>
    return if SHUTTING_DOWN
    for i=1,32
      item = @GetSlot i
      if IsValid item
        item\MoveToWorld item\GetPos!, item\GetAngles!

global class INVENTORY_SLOTTED extends INVENTORY
  GetLayout: =>
    owner = @GetOwner!
    return owner\GetInventoryLayout! if owner and owner.GetInventoryLayout

  HasSlot: (slot) =>
    layout = @GetLayout!
    return tobool @GetLayout![slot] if layout

  GetItem: (slot) =>
    layout = @GetLayout!
    @GetSlot @GetLayout![slot] if layout
  SetItem: (item, slot) =>
    old = @GetItem slot
    @SetSlot @GetLayout![slot], item
    hook.Run 'InventoryItemChanged', @, slot, old, item
  AddItem: (item, slot) =>
    switch slot
      when SLOT_HAND, SLOT_OFFHAND, SLOT_BELT_L, SLOT_BELT_R
        @SetItem item, slot
        with item
          \SetInventoryEntity @
          \SetInventorySlot slot
          \SetParent NULL
          \DrawShadow true
          \SetCollisionGroup COLLISION_GROUP_WORLD
          \AlignToOwner!
          \GetPhysicsObject!\EnableMotion false
      else
        super item, slot
