class Food extends THING
  SetupDataTables: =>
    super!
    @AddNetworkVar 'Bool', 'Rotten'

  Model: Model'models/props_junk/garbage_plasticbottle002a.mdl'
  Spawnable: true

  Sound: Sound'npc/barnacle/barnacle_crunch2.wav'
  ImpactSound: Sound'physics/flesh/flesh_squishy_impact_hard2.wav'
  Hunger: 0 -- use negative numbers to satisfy a status
  Fatigue: 0
  Poison: 0
  Thirst: 0
  HealthAdd: 0 -- temp until we get a new health system

  RotTime: 0 -- 0 means never rot

  IName: 'food'
  ProcessIName: (text) =>
    super!
    if @GetRotten?
      text = "rotten #{text}"
    return text

  Eat: (ply) =>
    return if CLIENT
    ply\AddStatus STATUS_HUNGER, @Hunger if @Hunger ~= 0
    ply\AddStatus STATUS_FATIGUE, @Fatigue if @Fatigue ~= 0
    ply\AddStatus STATUS_POISON, @Poison if @Poison ~= 0
    ply\AddStatus STATUS_THIRST, @Thirst if @Thirst ~= 0
    ply\SetHealth math.min( ply\Health! + @HealthAdd, ply\GetMaxHealth! ) if @HealthAdd ~= 0
    @EmitSound @Sound
    if @GetRotten!
      ply\AddStatus STATUS_POISON, 1
    @Remove! if not @PersistAfterEat

  Used: (ply) =>
    @Eat ply

  UsedOnOther: (ply, ent) =>
    return if CLIENT
    @Eat ent if ent\IsPlayer!
    if ent.AcceptsFood and not ent\GetFull! and not @NonIngredient
      ply\Spasm sequence: 'gesture_item_give', SS: true
      ply\GetInventory!\RemoveItem @
      ent\AddFood @
      return true

  OnSpawned: =>
    super!
    @SetRotten false
    @RotsIn = CurTime! + @RotTime if @RotTime > 0
    return

  Think: =>
    super!
    return if CLIENT
    @Rot! if @RotsIn and (not @GetRotten!) and @RotsIn < CurTime!

  Rot: =>
    @SetRotten true
    @SetColor Color(100, 0, 150)
    @EmitSound "FoodRot"

class Water extends Food
  IName: 'water'
  Model: 'models/props_junk/PopCan01a.mdl'
  Sound: Sound'npc/barnacle/barnacle_gulp2.wav'
  Thirst: -1

class Beans extends Food
  IName: 'beans'
  Model: 'models/props_junk/garbage_metalcan002a.mdl'
  Hunger: -1
  RotTime: 600

class Bandage extends Food
  IName: 'skin bandage'
  Model: 'models/props/bandage.mdl'
  Material: 'props/medkit1'
  Sound: Sound'physics/flesh/flesh_impact_hard4.wav'
  HealthAdd: 50
  Poison: -2
  NonIngredient: true

class Kibble extends Food
  IName: 'kibble'
  Model: 'models/props_junk/garbage_bag001a.mdl'
  Hunger: -1
  RotTime: 60

class Poison extends Kibble
  Poison: 1

class Magick extends Beans
  Model: 'models/props_junk/garbage_metalcan002a.mdl'
  HealthAdd: 30

class Meat extends Food
  IName: 'meat'
  Model: 'models/props/sausage.mdl'
  Material: 'props/food'
  Hunger: -1
  RotTime: 120
  RuinedResult: 'thing/food/meat/gore'

class Human extends Meat
  IName: 'meat?'

class Gore extends Meat
  IName: 'gore'
  Model: 'models/in/gibs/human/mgib_02.mdl'
  Material: ''
  Poison: 2
  RotTime: 60

class Char extends Gore
  IName: 'char'
  Color: Color(50, 50, 50)
  Poison: 2
  RotTime: 900

class FoodRot extends SOUND
  sound: ["weapons/bugbait/bugbait_squeeze#{i}.wav" for i=1,3]
  level: SNDLVL_50dB


class Bowl extends Food
  IName: 'bowl'
  Model: 'models/props_junk/garbage_takeoutcarton001a.mdl'
  RotTime: 0 -- do not rot
  PersistAfterEat: true
  NonIngredient: true

  SetupDataTables: =>
    super!
    @AddNetworkVar 'String', 'SoupName'

  Empty: => -- when the bowl spills or is eaten
    @Hunger = 0 -- use negative numbers to satisfy a status
    @Fatigue = 0
    @Poison = 0
    @Thirst = 0
    @HealthAdd = 0 -- temp until we get a new health system

    @RotTime = 0 -- 0 means never rot
    @SetRotten false
    @SetColor Color(255, 255, 255) -- just resetting these

    @SetSoupName ''

  OnSpawned: =>
    super!
    @Empty!

  Eat: (ply) =>
    return if @GetSoupName! == ''
    super(ply)
    @Empty!

  GetValue: ( potval ) =>
    if potval == 0
      return 0
    elseif potval > 0
      return -1
    else
      return 1 -- i may be stupid

  UsedOnOther: (ply, ent) =>
    return if CLIENT
    if ent.BowlScoopable and ent\GetSoupName! ~= "" and @GetSoupName !  == ""
      @SetSoupName ent\GetSoupName!

      empty = true

      val = @GetValue ent.Hunger
      ent.Hunger += val
      @Hunger += val * -1
      empty = false unless val == 0

      val = @GetValue ent.Fatigue
      ent.Fatigue += val
      @Fatigue += val * -1
      empty = false unless val == 0

      val = @GetValue ent.Poison
      ent.Poison += val
      @Poison += val * -1
      empty = false unless val == 0

      val = @GetValue ent.Thirst
      ent.Thirst += val
      @Thirst += val * -1
      empty = false unless val == 0

      ent\Empty! if empty

  ProcessIName: (...) =>
    text = super ...
    if @GetSoupName != ''
      text ..= " of #{@GetSoupName!}"
    return text
